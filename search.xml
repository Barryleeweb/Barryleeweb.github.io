<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[git使用方法]]></title>
      <url>https://barryleeweb.github.io/2017/08/04/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="上传本地代码到GitHub"><a href="#上传本地代码到GitHub" class="headerlink" title="上传本地代码到GitHub"></a>上传本地代码到GitHub</h1><h2 id="1-建立git仓库"><a href="#1-建立git仓库" class="headerlink" title="1.建立git仓库"></a>1.建立git仓库</h2><p>git init</p>
<h2 id="2-将项目的所有文件添加到仓库中"><a href="#2-将项目的所有文件添加到仓库中" class="headerlink" title="2.将项目的所有文件添加到仓库中"></a>2.将项目的所有文件添加到仓库中</h2><p>git add .</p>
<h2 id="3-将add的文件commit到仓库"><a href="#3-将add的文件commit到仓库" class="headerlink" title="3.将add的文件commit到仓库"></a>3.将add的文件commit到仓库</h2><p>git commit -m “创建仓库”</p>
<h2 id="4-去github上创建自己的Repository"><a href="#4-去github上创建自己的Repository" class="headerlink" title="4.去github上创建自己的Repository"></a>4.去github上创建自己的Repository</h2><p>复制仓库的https地址</p>
<h2 id="5-将本地的仓库关联到github上"><a href="#5-将本地的仓库关联到github上" class="headerlink" title="5.将本地的仓库关联到github上"></a>5.将本地的仓库关联到github上</h2><p>git remote add origin <a href="https://github.com/。。。" target="_blank" rel="external">https://github.com/。。。</a></p>
<h2 id="6-上传github之前，要先pull一下"><a href="#6-上传github之前，要先pull一下" class="headerlink" title="6.上传github之前，要先pull一下"></a>6.上传github之前，要先pull一下</h2><p>git pull origin master</p>
<h2 id="7-上传代码到github远程仓库"><a href="#7-上传代码到github远程仓库" class="headerlink" title="7.上传代码到github远程仓库"></a>7.上传代码到github远程仓库</h2><p>git push -u origin master</p>
<h1 id="拷贝代码"><a href="#拷贝代码" class="headerlink" title="拷贝代码"></a>拷贝代码</h1><p>git clone <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a>…<br><a id="more"></a></p>
<h1 id="关于分支Branch"><a href="#关于分支Branch" class="headerlink" title="关于分支Branch"></a>关于分支Branch</h1><h2 id="1-什么是分支Branch？"><a href="#1-什么是分支Branch？" class="headerlink" title="1. 什么是分支Branch？"></a>1. 什么是分支Branch？</h2><p>GitHub仓库默认有一个master的分支，当我们在master分支开发过程中接到一个新的功能需求，我们就可以新建一个分支同步开发而互不影响，开发完成后，在合并merge到主分支master上。</p>
<h2 id="2-分支操作"><a href="#2-分支操作" class="headerlink" title="2.分支操作"></a>2.分支操作</h2><p>现在我们需要合并两个分支：”master” 和 “gh-pages”</p>
<ul>
<li>打开 Git Shell</li>
<li>输入命令 git branch，我们可以看到我们目前的两个分支</li>
<li>输入命令git branch new_branch，创建一个新的分支 new_branch</li>
<li>输入命令 git checkout gh-pages，我们可以切换分支</li>
<li>or : 新建一个分支并且立即切换到新建的分支上，输入命令 git checkout -b new_branch_ha</li>
<li>合并分支，输入命令git merge gh-pages 报错！ fatal：refusing to merge unrelated histories.</li>
<li>解决方法：在命令后面加上一句“–allow-unrelated-histories”，即完整的命令为“git merge gh-pages –allow-unrelated-histories”,可以看到 gh-pages分支上的文件全部合并到了 master分支上</li>
<li>我们需要输入命令“git push”，可以看到我们的代码已经同步到仓库 test.github.com 上啦</li>
<li>删除分支，刚刚我们在第4步新建了一个多余的分支“new_branch_ha”需要删掉，我们首先输入命令“git branch”查看当前的分支有哪些，然后输入命令“git branch -D new_branch_ha”删除分支“new_branch_ha”，最后我们输入命令“git branch”查看分支已经被我们成功删除。</li>
</ul>
<p>另外：</p>
<p>“git merge gh-pages –allow-unrelated-histories”之后如果出现Please enter a commit message to explain why this merge is necessary.<br>解决：</p>
<ul>
<li>按键盘左上角”Esc”</li>
<li>输入”:wq”,注意是冒号+wq,按回车键即可</li>
</ul>
<h1 id="关于删除文件"><a href="#关于删除文件" class="headerlink" title="关于删除文件"></a>关于删除文件</h1><ol>
<li>先添加一个新文件test.txt到Git并且提交：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add test.txt</div><div class="line">$ git commit -m &quot;add test.txt&quot;</div></pre></td></tr></table></figure>
<ol>
<li><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<ol>
<li>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div><div class="line">rm &apos;test.txt&apos;</div><div class="line">$ git commit -m &quot;remove test.txt&quot;</div></pre></td></tr></table></figure>
<p>文件就从版本库中被删除了。</p>
<ol>
<li>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- test.txt</div></pre></td></tr></table></figure>
<p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
<ol>
<li>总结：</li>
</ol>
<p>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>
<h1 id="创建gh-pages分支"><a href="#创建gh-pages分支" class="headerlink" title="创建gh-pages分支"></a>创建gh-pages分支</h1><p>之前的工作只是将我们的代码发布到了github上demo仓库的master分支上，当然你也可以不发布，而我们的展示页面代码必须发布到名为“gh-pages”的分支上。方法很简单，我们只需要在github的demo项目页面手动创建gh-pages分支即可</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1808251-9c330c0784cf84d2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>选择Branch：master，创建gh-pages</p>
<ol>
<li>新建并切换到gh-pages分支</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout --orphan gh-pages</div></pre></td></tr></table></figure>
<ol>
<li>之后的操作和之前一样，只是push的时候是gh-pages</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add *</div><div class="line">git commit -m &quot;update&quot;</div><div class="line">git push -u origin gh-pages</div></pre></td></tr></table></figure>
<ol>
<li>访问页面<br>创建并上传文件至gh-pages之后，我们就可以访问如下url来查看自己的demo了：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://(user_name|org_name).github.io/repo_name</div></pre></td></tr></table></figure>
<ol>
<li>github中的master<strong>自动同步</strong>到gh-pages<br>将如下代码复制到.git目录中的config文件中,位置是在[remote “origin”]这个段里面:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">push = +refs/heads/master:refs/heads/gh-pages</div><div class="line">push = +refs/heads/master:refs/heads/master</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> git&amp;blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串及数组操作]]></title>
      <url>https://barryleeweb.github.io/2017/07/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="1-判断回文字符串"><a href="#1-判断回文字符串" class="headerlink" title="1.判断回文字符串"></a>1.判断回文字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function palindrome(str)&#123;</div><div class="line">	// \W匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</div><div class="line">	var re = /[\W_]/g;</div><div class="line">	// 将字符串变成小写字符,并干掉除字母数字外的字符</div><div class="line">	var lowRegStr = str.toLowerCase().replace(re,&apos;&apos;);</div><div class="line">	// 如果字符串lowRegStr的length长度为0时，字符串即是palindrome</div><div class="line">	if(lowRegStr.length===0)</div><div class="line">		return true;</div><div class="line">	// 如果字符串的第一个和最后一个字符不相同，那么字符串就不是palindrome</div><div class="line">	if(lowRegStr[0]!=lowRegStr[lowRegStr.length-1])</div><div class="line">		return false;</div><div class="line">	//递归</div><div class="line">	return palindrome(lowRegStr.slice(1,lowRegStr.length-1));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-翻转字符串"><a href="#2-翻转字符串" class="headerlink" title="2.翻转字符串"></a>2.翻转字符串</h3><p><strong>反向遍历字符串</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function reverseString(str)&#123;</div><div class="line">	var tmp = &apos;&apos;;</div><div class="line">	for(var i=str.length-1;i&gt;=0;i--)</div><div class="line">		tmp += str[i];</div><div class="line">	return tmp</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>转化成array操作</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function reverseString2(str)&#123;</div><div class="line">	var arr = str.split(&quot;&quot;);</div><div class="line">	var i = 0,j = arr.length-1;</div><div class="line">	while(i&lt;j)&#123;</div><div class="line">	    tmp = arr[i];</div><div class="line">	    arr[i] = arr[j];</div><div class="line">	    arr[j] = tmp;</div><div class="line">	    i++;</div><div class="line">	    j--;</div><div class="line">	&#125;</div><div class="line">	return arr.join(&quot;&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为str[i]是只读的，不能str[0]=str[1]这样操作。</p>
<p>如果允许用reverse()，也可以用’str’.split(‘’).reverse().join(‘’)实现。</p>
<h3 id="3-生成指定长度随机字符串"><a href="#3-生成指定长度随机字符串" class="headerlink" title="3.生成指定长度随机字符串"></a>3.生成指定长度随机字符串</h3><p>配合模糊等效果可以生成个验证码- -<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function randomString(n)&#123;</div><div class="line">	var str = &apos;abcdefghijklmnopqrstuvwxyz0123456789&apos;;</div><div class="line">	var tmp = &apos;&apos;;</div><div class="line">	for(var i=0;i&lt;n;i++)</div><div class="line">	    tmp += str.charAt(Math.round(Math.random()*str.length));</div><div class="line">	return tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-统计字符串中次数最多字母"><a href="#4-统计字符串中次数最多字母" class="headerlink" title="4.统计字符串中次数最多字母"></a>4.统计字符串中次数最多字母</h3><p>利用Object中key的唯一性，利用key来进行筛选，然后计数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function findMaxDuplicateChar(str) &#123;</div><div class="line">    if(str.length == 1) &#123;</div><div class="line">        return str;</div><div class="line">    &#125;</div><div class="line">    var charObj = &#123;&#125;;</div><div class="line">    for(var i = 0; i &lt; str.length; i++) &#123;</div><div class="line">        if(!charObj[str.charAt(i)]) &#123;</div><div class="line">            charObj[str.charAt(i)] = 1;</div><div class="line">        &#125; else &#123;</div><div class="line">            charObj[str.charAt(i)] += 1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    var maxChar = &apos;&apos;,</div><div class="line">        maxValue = 1;</div><div class="line">    for(var k in charObj) &#123;</div><div class="line">        if(charObj[k] &gt;= maxValue) &#123;</div><div class="line">            maxChar = k;</div><div class="line">            maxValue = charObj[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return maxChar + &apos;：&apos; + maxValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><h3 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1.数组去重"></a>1.数组去重</h3><p>还是利用Object中key的唯一性，利用key来进行筛选。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function unique(arr)&#123;</div><div class="line">	var obj = &#123;&#125;</div><div class="line">	var data = []</div><div class="line">	for(var i in arr)&#123;</div><div class="line">	    if(!obj[arr[i]])&#123;</div><div class="line">	        obj[arr[i]] = true;</div><div class="line">	        data.push(arr[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-Number数组中最大差值"><a href="#2-Number数组中最大差值" class="headerlink" title="2.Number数组中最大差值"></a>2.Number数组中最大差值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function getMaxProfit(arr)&#123;</div><div class="line">    var min = arr[0], max = arr[0];</div><div class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">        if(arr[i]&lt;min)</div><div class="line">            min = arr[i];</div><div class="line">		if(arr[i]&gt;max)</div><div class="line">		    max = arr[i];</div><div class="line">	&#125;</div><div class="line">	return max - min;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构&amp;算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见排序及查找算法]]></title>
      <url>https://barryleeweb.github.io/2017/07/26/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E5%8F%8A%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function bubbleSort(arr)&#123;</div><div class="line">	var i = j = 0;</div><div class="line">	for(i=1;i&lt;arr.length;i++)&#123;</div><div class="line">		for(j=0;j&lt;=arr.length-i;j++)&#123;</div><div class="line">			var temp = 0;</div><div class="line">			if(arr[j]&gt;arr[j+1])&#123;</div><div class="line">				temp = arr[j];</div><div class="line">				arr[j] = arr[j+1];</div><div class="line">				arr[j+1] = temp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2.快速排序"></a>2.快速排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function quickSort(arr,l,r)&#123;</div><div class="line">	if(l &lt; r)&#123;</div><div class="line">		var i = l, j = r, x = arr[i];</div><div class="line">		while(i&lt;j)&#123;</div><div class="line">			while(i&lt;j &amp;&amp; arr[j]&gt;x)</div><div class="line">				j--;</div><div class="line">			</div><div class="line">			if(i&lt;j)</div><div class="line">				//这里用i++，被换过来的必然比x小，赋值后直接让i自加，不用再比较，可以提高效率</div><div class="line">				arr[i++] = arr[j];</div><div class="line">			</div><div class="line">			while(i&lt;j &amp;&amp; arr[i]&lt;x)</div><div class="line">				i++;</div><div class="line">			</div><div class="line">			if(i&lt;j)</div><div class="line">				//这里用j--，被换过来的必然比x大，赋值后直接让j自减，不用再比较，可以提高效率</div><div class="line">				arr[j--] = arr[i];</div><div class="line">		&#125;</div><div class="line">		arr[i] = x;</div><div class="line">		</div><div class="line">		quickSort(arr, l, i-1);</div><div class="line">		quickSort(arr, i+1, r);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-二路归并"><a href="#3-二路归并" class="headerlink" title="3.二路归并"></a>3.二路归并</h2><p>将两个按值有序序列合并成一个按值有序序列，则称之为二路归并排序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function merge(left, right) &#123;</div><div class="line">    var result = [],</div><div class="line">        il = 0,</div><div class="line">        ir = 0;</div><div class="line"></div><div class="line">    while (il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</div><div class="line">        if (left[il] &lt; right[ir]) &#123;</div><div class="line">            result.push(left[il++]);</div><div class="line">        &#125; else &#123;</div><div class="line">            result.push(right[ir++]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    while(left[il])&#123;</div><div class="line">        result.push(left[il++]);</div><div class="line">	&#125;</div><div class="line">    while(right[ir])&#123;</div><div class="line">        result.push(right[ir++]);</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-二分查找"><a href="#4-二分查找" class="headerlink" title="4.二分查找"></a>4.二分查找</h2><p>二分查找又称折半查找，是在有序数组查找中用到的较为频繁的一种算法，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。</p>
<h3 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function binary_search(arr, key) &#123;</div><div class="line">    var low = 0,</div><div class="line">        high = arr.length - 1;</div><div class="line">    while(low &lt;= high)&#123;</div><div class="line">        var mid = parseInt((high + low) / 2);</div><div class="line">        if(key == arr[mid])&#123;</div><div class="line">            return  mid;</div><div class="line">        &#125;else if(key &gt; arr[mid])&#123;</div><div class="line">            low = mid + 1;</div><div class="line">        &#125;else if(key &lt; arr[mid])&#123;</div><div class="line">            high = mid -1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function binary_search2(arr, low, high, key) &#123;</div><div class="line">	if(low &gt; high)</div><div class="line">	    return -1;</div><div class="line">	var mid = parseInt((low + high)/2);</div><div class="line">	if(key == arr[mid])</div><div class="line">	    return mid;</div><div class="line">	else if(key &gt; arr[mid])</div><div class="line">	    return binary_search2(arr, mid+1, high, key);</div><div class="line">	else if(key &lt; arr[mid])</div><div class="line">        return binary_search2(arr, low, mid-1, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构&amp;算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5新特性]]></title>
      <url>https://barryleeweb.github.io/2017/07/26/HTM5%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h1><p><strong>兼容问题</strong>：IE8/IE7/IE6支持通过document.createElement方法产生的标签，可以利用这一特性让这些浏览器支持HTML5新标签</p>
<h2 id="1-绘画-canvas-元素"><a href="#1-绘画-canvas-元素" class="headerlink" title="1. 绘画 canvas 元素"></a>1. 绘画 canvas 元素</h2><h2 id="2-媒介回放的-video-和-audio-元素"><a href="#2-媒介回放的-video-和-audio-元素" class="headerlink" title="2.媒介回放的 video 和 audio 元素"></a>2.媒介回放的 video 和 audio 元素</h2><p> HTML5 规定了在网页上嵌入音频元素的标准，即使用 <audio> 元素。</audio></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;audiocontrols&gt;</div><div class="line">&lt;sourcesrc=&quot;horse.ogg&quot;type=&quot;audio/ogg&quot;&gt;</div><div class="line">&lt;sourcesrc=&quot;horse.mp3&quot;type=&quot;audio/mpeg&quot;&gt;</div><div class="line">您的浏览器不支持 audio 元素。</div><div class="line">&lt;/audio&gt;</div></pre></td></tr></table></figure>
<p> HTML5 规定了一种通过 video 元素来包含视频的标准方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;videowidth=&quot;320&quot;height=&quot;240&quot;controls&gt;</div><div class="line">&lt;sourcesrc=&quot;movie.mp4&quot;type=&quot;video/mp4&quot;&gt;</div><div class="line">&lt;sourcesrc=&quot;movie.ogg&quot;type=&quot;video/ogg&quot;&gt;</div><div class="line">您的浏览器不支持Video标签。</div><div class="line">&lt;/video&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="3-本地离线存储"><a href="#3-本地离线存储" class="headerlink" title="3.本地离线存储"></a>3.本地离线存储</h2><p> Web Storage DOMAPI为Web应用提供了一个能够替代cookie的Javascript解决方案</p>
<ul>
<li>localStorage长期存储数据，浏览器关闭后数据不丢失</li>
<li>sessionStorage 的数据在浏览器关闭后自动删除<h2 id="4-语意化更好的内容元素"><a href="#4-语意化更好的内容元素" class="headerlink" title="4.语意化更好的内容元素"></a>4.语意化更好的内容元素</h2></li>
<li><header></header></li>
<li><nav></nav></li>
<li><section></section></li>
<li><article></article></li>
<li><aside></aside></li>
<li><figcaption></figcaption></li>
<li><figure></figure></li>
<li><footer><h2 id="5-表单控件"><a href="#5-表单控件" class="headerlink" title="5.表单控件"></a>5.表单控件</h2>HTML5 拥有多个新的表单输入类型。这些新特性提供了更好的输入控制和验证。<br>calendar、date、time、email、url、search</footer></li>
</ul>
<h2 id="6-HTML5-拖放"><a href="#6-HTML5-拖放" class="headerlink" title="6.HTML5 拖放"></a>6.HTML5 拖放</h2><p>为了使元素可拖动，把 draggable 属性设置为 true</p>
<h2 id="7-HTML5-离线Web应用（应用程序缓存）"><a href="#7-HTML5-离线Web应用（应用程序缓存）" class="headerlink" title="7.HTML5 离线Web应用（应用程序缓存）"></a>7.HTML5 离线Web应用（应用程序缓存）</h2><p>HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。<br>应用程序缓存为应用带来三个优势：</p>
<ul>
<li>离线浏览 - 用户可在应用离线时使用它们</li>
<li>速度 - 已缓存资源加载得更快</li>
<li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。</li>
</ul>
<p>HTML5 Cache Manifest 实例<br>下面的例子展示了带有 cache manifest 的 HTML 文档（供离线浏览）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;htmlmanifest=&quot;demo.appcache&quot;&gt;</div><div class="line">&lt;body&gt;</div><div class="line">The content of the document......</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><strong>Manifest 文件</strong></p>
<p>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。<br>manifest 文件可分为三个部分：</p>
<ul>
<li>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</li>
<li>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</li>
<li>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面</li>
</ul>
<h2 id="8-HTML5-WebSocket"><a href="#8-HTML5-WebSocket" class="headerlink" title="8.HTML5 WebSocket"></a>8.HTML5 WebSocket</h2><p>WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>
<p>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</p>
]]></content>
      
        <categories>
            
            <category> HTML5&amp;CSS3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3新特性]]></title>
      <url>https://barryleeweb.github.io/2017/07/26/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h1><h2 id="1-CSS3选择器"><a href="#1-CSS3选择器" class="headerlink" title="1.CSS3选择器"></a>1.CSS3选择器</h2><p><strong>属性选择器：</strong></p>
<ul>
<li>E[attr] 只要有属性名</li>
<li>E[attr=value] 属性名=属性值</li>
<li>E[attr~=blue] 包含这个blue整个单词就可以</li>
<li>E[attr^=c] 以这个字母c开头的</li>
<li>E[attr$=b] 以这个字母b结尾的</li>
<li>E[attr*=a] 只要包含a这个字母就行</li>
<li>E[attr|=z] 只要以字母z-开头的或者就是字母z的</li>
</ul>
<p><strong>结构性伪类选择器</strong>：</p>
<ul>
<li>E:nth-child(n) 第n个子节点</li>
<li>div:nth-child(odd) 奇数行</li>
<li>div:nth-child(even) 偶数行</li>
<li>div:nth-child(2n) 2的倍数</li>
<li>E:nth-last-child(n) 倒数第n个</li>
</ul>
<p><strong>其他</strong>：</p>
<ul>
<li>E:empty 空元素</li>
<li>E:first-child 第一个子节点、和 E:nth-child(1)等价</li>
<li>E:last-child 倒数第一个、和 E:nth-last-child(1)等价</li>
<li><ul>
<li>注意不能有其他兄弟节点</li>
</ul>
</li>
<li></li>
<li>E:target 锚点元素的样式</li>
<li>div:target{width:100px;}</li>
<li><div id="”div1″"></div></li>
<li>只要锚点有#div1那上面的target样式就会生效</li>
<li>E:disabled 表单元素设置disabled</li>
<li>E:enabled 可点击的表单元素</li>
<li>E:checked 表示已经选中的checkbox或者radio</li>
<li></li>
<li>文本新增伪类：</li>
<li>E:first-line 第一行</li>
<li>E:first-letter 第一个字</li>
<li>E::selection 选中文本的时候</li>
<li>E::before E标签前面添加东西,需要配合content来用</li>
<li></li>
<li>E::after E标签后面添加东西</li>
<li>E:before E:after单引号也能用</li>
<li>E:not(s) 不包括s</li>
<li>h1:not(.red) 排除有class为red的h1元素</li>
<li>E~F E后面的F兄弟节点<a id="more"></a>
<h2 id="2-CSS3-边框（Borders）"><a href="#2-CSS3-边框（Borders）" class="headerlink" title="2.CSS3 边框（Borders）"></a>2.CSS3 边框（Borders）</h2>用CSS3，你可以创建圆角边框，添加阴影框，并作为边界的形象而不使用设计程序</li>
<li>border-image    设置所有边框图像的速记属性。</li>
<li>border-radius    一个用于设置所有四个边框- *-半径属性的速记属性</li>
<li>box-shadow    附加一个或多个下拉框的阴影</li>
</ul>
<h2 id="3-CSS3-背景"><a href="#3-CSS3-背景" class="headerlink" title="3.CSS3 背景"></a>3.CSS3 背景</h2><ul>
<li>background-clip    规定背景的绘制区域。</li>
<li>background-origin    规定背景图片的定位区域。</li>
<li>background-size    规定背景图片的尺寸</li>
</ul>
<h2 id="4-CSS3-渐变"><a href="#4-CSS3-渐变" class="headerlink" title="4.CSS3 渐变"></a>4.CSS3 渐变</h2><p>CSS3 定义了两种类型的渐变（gradients）：</p>
<ul>
<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: linear-gradient(direction, color-stop1, color-stop2,...);</div></pre></td></tr></table></figure>
<ul>
<li>径向渐变（Radial Gradients）- 由它们的中心定义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: radial-gradient(center, shape size, start-color,...,last-color);</div></pre></td></tr></table></figure>
<h2 id="5-CSS3-文本效果"><a href="#5-CSS3-文本效果" class="headerlink" title="5.CSS3 文本效果"></a>5.CSS3 文本效果</h2><ul>
<li>text-emphasis 向元素的文本应用重点标记以及重点标记的前景色。</li>
<li>text-justify    规定当 text-align 设置为 “justify” 时所使用的对齐方法。</li>
<li>text-outline    规定文本的轮廓。</li>
<li>text-overflow    规定当文本溢出包含元素时发生的事情。</li>
<li>text-shadow    向文本添加阴影。</li>
<li>text-wrap    规定文本的换行规则。</li>
</ul>
<h2 id="6-CSS3-转换和变形"><a href="#6-CSS3-转换和变形" class="headerlink" title="6.CSS3 转换和变形"></a>6.CSS3 转换和变形</h2><p>  旋转（transform）<br>  transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);//旋转,缩放,定位,倾斜</p>
<h2 id="7-CSS3-盒模型"><a href="#7-CSS3-盒模型" class="headerlink" title="7.CSS3 盒模型"></a>7.CSS3 盒模型</h2><p> 在 CSS3 中, 增加了一些新的用户界面特性来调整元素尺寸，框尺寸和外边框，主要包括以下用户界面属性：</p>
<ul>
<li>resize：none | both | horizontal | vertical | inherit <em>resize属性指定一个元素是否应该由用户去调整大小。</em></li>
<li>box-sizing: content-box | border-box | inherit box-sizing <em>属性允许您以确切的方式定义适应某个区域的具体内容</em></li>
<li>outline:outline-color outline-style outline-width outine-offset<br><em>outline-offset属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。</em></li>
</ul>
<h2 id="8-CSS3-弹性盒flexbox"><a href="#8-CSS3-弹性盒flexbox" class="headerlink" title="8.CSS3 弹性盒flexbox"></a>8.CSS3 弹性盒flexbox</h2><ul>
<li>display    指定 HTML 元素盒子类型。</li>
<li>flex-direction    指定了弹性容器中子元素的排列方式</li>
<li>justify-content    设置弹性盒子元素在主轴（横轴）方向上的对齐方式</li>
<li>align-items    设置弹性盒子元素在侧轴（纵轴）方向上的对齐方式</li>
<li>flex-wrap    设置弹性盒子的子元素超出父容器时是否换行</li>
<li>align-content    修改 flex-wrap 属性的行为，类似 align-items,但不是设置子元素对齐，而是设置行对齐</li>
<li>flex-flow    flex-direction 和 flex-wrap 的简写</li>
<li>order    设置弹性盒子的子元素排列顺序</li>
<li>align-self    在弹性子元素上使用。覆盖容器的 align-items 属性</li>
<li>flex    设置弹性盒子的子元素如何分配空间</li>
</ul>
<h2 id="9-多媒体查询"><a href="#9-多媒体查询" class="headerlink" title="9.多媒体查询"></a>9.多媒体查询</h2><ol>
<li>使用媒体类型</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;linkrel=&quot;stylesheet&quot;type=&quot;text/css&quot;href=&quot;site.css&quot;media=&quot;screen&quot;/&gt;</div><div class="line">&lt;linkrel=&quot;stylesheet&quot;type=&quot;text/css&quot;href=&quot;print.css&quot;media=&quot;print&quot;/&gt;</div></pre></td></tr></table></figure>
<ol>
<li>媒体查询规则</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@media all and(min-width:800px)&#123;...&#125;</div></pre></td></tr></table></figure>
<p>@media all 是媒体类型，也就是说，将此 CSS 应用于所有媒体类型。<br>(min-width:800px) 是包含媒体查询的表达式，如果浏览器的最小宽度为 800 像素，则会告诉浏览器只运用下列 CSS。</p>
<ol>
<li>and 条件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@media(min-width:800px)and(max-width:1200px)and(orientation:portrait)&#123;...&#125;</div></pre></td></tr></table></figure>
<ol>
<li>or 关键词</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@media(min-width:800px)or(orientation:portrait)&#123;...&#125;</div></pre></td></tr></table></figure>
<ol>
<li>使用 not</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@media(not min-width:800px)&#123;...&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HTML5&amp;CSS3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[websocket学习]]></title>
      <url>https://barryleeweb.github.io/2017/07/26/websocket%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="1-WebSocket-前世今生"><a href="#1-WebSocket-前世今生" class="headerlink" title="1.WebSocket 前世今生"></a>1.WebSocket 前世今生</h1><p>众所周知，Web应用的交互过程通常是客户端通过浏览器发出一个请求，服务器端接收请求后进行处理并返回结果给客户端，客户端浏览器将信息呈现。</p>
<p>这种机制对于信息变化不是特别频繁的应用尚可，但对于实时要求高、海量并发的应用来说显得捉襟见肘，尤其在当前业界移动互联网蓬勃发展的趋势下，高并发与用户实时响应是 Web 应用经常面临的问题，比如金融证券的实时信息，Web 导航应用中的地理位置获取，社交网络的实时消息推送等。</p>
<p>传统的请求-响应模式的Web开发在处理此类业务场景时，通常采用实时通讯方案，常见的是：</p>
<ul>
<li>轮询，原理简单易懂，就是客户端通过一定的时间间隔以频繁请求的方式向服务器发送请求，来保持客户端和服务器端的数据同步。问题很明显，当客户端以固定频率向服务器端发送请求时，服务器端的数据可能并没有更新，带来很多无谓请求，浪费带宽，效率低下。</li>
<li>基于 Flash，AdobeFlash 通过自己的 Socket 实现完成数据交换，再利用Flash暴露出相应的接口为 JavaScript 调用，从而达到实时传输目的。此方式比轮询要高效，且因为Flash安装率高，应用场景比较广泛，但在移动互联网终端上 Flash的支持并不好。IOS 系统中没有 Flash 的存在，在 Android 中虽然有 Flash 的支持，但实际的使用效果差强人意，且对移动设备的硬件配置要求较高。2012年Adobe官方宣布不再支持 Android4.1+系统，宣告了Flash在移动终端上的死亡。</li>
</ul>
<p>从上文可以看出，传统Web模式在处理高并发及实时性需求的时候，会遇到难以逾越的瓶颈，我们需要一种高效节能的双向通信机制来保证数据的实时传输。在此背景下，基于 HTML5 规范的、有 Web TCP 之称的 WebSocket 应运而生。<br><a id="more"></a></p>
<h1 id="2-WebSocket-机制"><a href="#2-WebSocket-机制" class="headerlink" title="2.WebSocket 机制"></a>2.WebSocket 机制</h1><p>WebSocket 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在 TCP 之上，同 HTTP 一样通过 TCP来传输数据，但是它==和HTTP最大不同==是：</p>
<ul>
<li>WebSocket 是一种双向通信协议，在建立连接后，WebSocket 服务器和 Browser/Client Agent 都能主动的向对方发送或接收数据，就像 Socket 一样；</li>
<li>WebSocket 需要类似TCP的客户端和服务器端通过握手连接，连接成功后才能相互通信。<h2 id="连接模式"><a href="#连接模式" class="headerlink" title="连接模式"></a>连接模式</h2>传统 HTTP 请求响应客户端服务器交互图：</li>
</ul>
<p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-WebSocket/img001.jpg" alt="image"></p>
<p>使用 WebSocket 模式客户端与服务器的交互如下图：</p>
<p><img src="https://www.ibm.com/developerworks/cn/java/j-lo-WebSocket/img002.jpg" alt="image"></p>
<p>上图对比可以看出，相对于传统HTTP每次请求-应答都需要客户端与服务端建立连接的模式，WebSocket是类似 Socket 的 TCP长连接的通讯模式，一旦WebSocket 连接建立后，后续数据都以帧序列的形式传输。在客户端断开 WebSocket连接或Server端断掉连接前，不需要客户端和服务端重新发起连接请求。在海量并发及客户端与服务器交互负载流量大的情况下，极大的节省了网络带宽资源的消耗，有明显的性能优势，且客户端发送和接受消息是在同一个持久连接上发起，实时性优势明显。</p>
<h2 id="交互报文"><a href="#交互报文" class="headerlink" title="交互报文"></a>交互报文</h2><p>在客户端，new WebSocket 实例化一个新的 WebSocket 客户端对象，连接类似 ws://yourdomain:port/path 的服务端 WebSocket URL，WebSocket 客户端对象会自动解析并识别为 WebSocket 请求，从而连接服务端端口，执行双方握手过程，客户端发送数据格式类似：</p>
<p><strong>WebSocket 客户端连接报文：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /webfin/websocket/ HTTP/1.1</div><div class="line">Host: localhost</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Key: xqBt3ImNzJbYqRINxEFlkg==</div><div class="line">Origin: &lt;a href=&quot;http://localhost/&quot;&gt;&lt;code&gt;http://localhost&lt;/code&gt;&lt;/a&gt;:8080</div><div class="line">Sec-WebSocket-Version: 13</div></pre></td></tr></table></figure>
<p>可以看到，客户端发起的 WebSocket 连接报文类似传统 HTTP 报文，”Upgrade：websocket”参数值表明这是 WebSocket 类型请求，“Sec-WebSocket-Key”是 WebSocket 客户端发送的一个 base64 编码的密文，要求服务端必须返回一个对应加密的“Sec-WebSocket-Accept”应答，否则客户端会抛出“Error during WebSocket handshake”错误，并关闭连接。</p>
<p><strong>WebSocket 服务端响应报文</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 101 Switching Protocols</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Accept: K7DJLdLooIwIG/MOpvWFB3y3FE8=</div></pre></td></tr></table></figure>
<p>“Sec-WebSocket-Accept”的值是服务端采用与客户端一致的密钥计算出来后返回客户端的,“HTTP/1.1 101 Switching Protocols”表示服务端接受 WebSocket 协议的客户端连接，经过这样的请求-响应处理后，客户端服务端的 WebSocket 连接握手成功, 后续就可以进行 TCP 通讯了。读者可以查阅WebSocket 协议栈了解 WebSocket 客户端和服务端更详细的交互数据格式。<br>在开发方面，WebSocket API 也十分简单，我们只需要实例化 WebSocket，创建连接，然后服务端和客户端就可以相互发送和响应消息，在下文 WebSocket 实现及案例分析部分，可以看到详细的 WebSocket API 及代码实现。</p>
<h1 id="3-WebSocket-实现"><a href="#3-WebSocket-实现" class="headerlink" title="3.WebSocket 实现"></a>3.WebSocket 实现</h1><p>WebSocket 的实现分为客户端和服务端两部分，客户端（通常为浏览器）发出WebSocket连接请求，服务端响应，实现类似TCP握手的动作，从而在浏览器客户端和 WebSocket服务端之间形成一条HTTP长连接快速通道。两者之间后续进行直接的数据互相传送，不再需要发起连接和相应。</p>
<h2 id="WebSocket-服务端-API"><a href="#WebSocket-服务端-API" class="headerlink" title="WebSocket 服务端 API"></a>WebSocket 服务端 API</h2><h2 id="WebSocket-客户端-API"><a href="#WebSocket-客户端-API" class="headerlink" title="WebSocket 客户端 API"></a>WebSocket 客户端 API</h2><p>客户端 WebSocketAPI基本上已经在各个主流浏览器厂商中实现了统一，因此使用标准 HTML5 定义的 WebSocket 客户端的 JavaScript API 即可，当然也可以使用业界满足 WebSocket 标准规范的开源框架，如 Socket.io。</p>
<p><strong>WebSocket 客户端 API 示例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var ws = new WebSocket(“ws://echo.websocket.org”); </div><div class="line"> ws.onopen = function()&#123;ws.send(“Test!”); &#125;; </div><div class="line"> ws.onmessage = function(evt)&#123;console.log(evt.data);ws.close();&#125;; </div><div class="line"> ws.onclose = function(evt)&#123;console.log(“WebSocketClosed!”);&#125;; </div><div class="line"> ws.onerror = function(evt)&#123;console.log(“WebSocketError!”);&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>第一行代码是在申请一个WebSocket对象，参数是需要连接的服务器端的地址，同 HTTP 协议开头一样，WebSocket 协议的 URL 使用 ws://开头，另外安全的 WebSocket 协议使用 wss://开头。</li>
<li>第二行到第五行为WebSocket对象注册消息的处理函数，WebSocket 对象一共支持四个消息 onopen, onmessage, onclose 和 onerror，有了这 4 个事件，我们就可以很容易很轻松的驾驭 WebSocket。</li>
<li>当 Browser 和 WebSocketServer 连接成功后，会触发 onopen 消息；如果连接失败，发送、接收数据失败或者处理数据出现错误，browser 会触发 onerror 消息；当 Browser 接收到 WebSocketServer 发送过来的数据时，就会触发 onmessage 消息，参数 evt 中包含 Server 传输过来的数据；当 Browser 接收到 WebSocketServer 端发送的关闭连接请求时，就会触发 onclose 消息。我们可以看出所有的操作都是采用异步回调的方式触发，这样不会阻塞UI，可以获得更快的响应时间，更好的用户体验。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> HTTP网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式 (订阅者与发布者)]]></title>
      <url>https://barryleeweb.github.io/2017/07/26/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%20(%E8%AE%A2%E9%98%85%E8%80%85%E4%B8%8E%E5%8F%91%E5%B8%83%E8%80%85)/</url>
      <content type="html"><![CDATA[<h2 id="理解观察者模式："><a href="#理解观察者模式：" class="headerlink" title="理解观察者模式："></a>理解观察者模式：</h2><p>什么是观察者模式？</p>
<p>观察者模式又叫做发布订阅模式，它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生改变时就会通知所有观察着对象。它是由两类对象组成，主题和观察者，主题负责发布事件，同时观察者通过订阅这些事件来观察该主体，发布者和订阅者是完全解耦的，彼此不知道对方的存在，两者仅仅共享一个自定义事件的名称。<br><a id="more"></a><br>理解观察者模式：</p>
<p>JS传统事件就是一个观察者模式，之所以要有观察者模式，是因为有时候和传统事件无关的事件，比如：2个或者更多模块的直接通信问题，比如说我有个index.html页面，我有很多JS文件，比如：</p>
<p>a.js: function a(){};    b.js: function b(){};  c.js  function c(){};  等等。后面还有许多这样的JS， 那么我要在index.html初始化这些函数的话，我需要这样调用a();b();c()等等，也就是说页面调用的时候 我要这样调用，增加了依赖性，我要知道有多少个函数要这样初始化调用，但是如果我们现在用观察者模式就不需要知道有哪些订阅者，比如一个模块(或者多个模块)订阅了一个主题(或者事件)，另一个模块发布这个主题时候，订阅这个主题模块就可以执行了，观察者主要让订阅者与发布者解耦，发布者不需要知道哪些模块订阅了这个主题，它只管发布这个主题就可以了，同样订阅者也无需知道那个模块会发布这个主题，它只管订阅这个主题就可以了。这样2个模块(或更多模块)就实现了关联了。而不需要和上面代码一样，我要知道哪些模块要初始化，我要怎样初始化。这只是一个简单的列子解释观察者模式要使用在什么地方，我也看过很多博客关于这方面的资料，但是很多人写博客只是讲了如何实现观察者模式及观察者模式的好处，并没有讲我们什么时候该使用观察者模式，所以我列举了上面的列子，就是多个不同业务模块需要相互关联的时候，可以使用观察者模式。就好比requireJS，seaJS，KISSY解决依赖的问题一样(比如A依赖于B，B依赖于C，只要一个解决入口文件，其他都会异步加载出来一样)。也就是说各个模块之间的关联性可以使用观察者模式来设计。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">	&lt;title&gt;PubSub&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	function PubSub() &#123;</div><div class="line">	    this.handlers = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line">	PubSub.prototype = &#123;</div><div class="line">	    // 订阅事件</div><div class="line">	    on: function(eventType,handler)&#123;</div><div class="line">	        var self = this;</div><div class="line">	        if(!(eventType in self.handlers)) &#123;</div><div class="line">	             self.handlers[eventType] = [];</div><div class="line">	        &#125;</div><div class="line">	        self.handlers[eventType].push(handler);  // 对象handlers存储key：事件名handlers及value：函数handler</div><div class="line">	        return this;</div><div class="line">	    &#125;,</div><div class="line">        // 触发事件(发布事件)</div><div class="line">        emit: function(eventType)&#123;</div><div class="line">           var self = this;</div><div class="line">           var handlerArgs = Array.prototype.slice.call(arguments,1);  // 取第二个开始的参数</div><div class="line">           for(var i = 0; i &lt; self.handlers[eventType].length; i++) &#123;  // 遍历事件名的所有回调函数</div><div class="line">                 self.handlers[eventType][i].apply(self,handlerArgs);   // 将参数传入回调函数</div><div class="line">           &#125;</div><div class="line">           return self;</div><div class="line">        &#125;</div><div class="line">	&#125;;</div><div class="line">	// 调用方式如下：</div><div class="line"></div><div class="line">	var pubsub = new PubSub();</div><div class="line"></div><div class="line">	pubsub.on(&apos;A&apos;,function(data)&#123;</div><div class="line"></div><div class="line">	console.log(1 + data);  // 执行第一个回调业务函数</div><div class="line"></div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	pubsub.on(&apos;A&apos;,function(data)&#123;</div><div class="line"></div><div class="line">	console.log(2 + data); // 执行第二个业务回调函数</div><div class="line"></div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	// 触发事件A</div><div class="line"></div><div class="line">	pubsub.emit(&apos;A&apos;,&quot;我是参数&quot;);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[baidu_ife_小薇学院总结（四）]]></title>
      <url>https://barryleeweb.github.io/2017/07/25/baidu_ife_%E5%B0%8F%E8%96%87%E5%AD%A6%E9%99%A2%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Task8-响应式网格（栅格化）"><a href="#Task8-响应式网格（栅格化）" class="headerlink" title="Task8:响应式网格（栅格化）"></a>Task8:响应式网格（栅格化）</h1><h2 id="1-目标："><a href="#1-目标：" class="headerlink" title="1.目标："></a>1.目标：</h2><p><strong>使用 HTML 与 CSS 实现类似 BootStrap 的响应式 12 栏网格布局，根据屏幕宽度，元素占的栏数不同。</strong></p>
<h2 id="2-参考链接"><a href="#2-参考链接" class="headerlink" title="2.参考链接"></a>2.参考链接</h2><p><a href="http://j4n.co/blog/Creating-your-own-css-grid-system" target="_blank" rel="external">Creating Your Own CSS Grid System</a></p>
<p><strong>栅格化设计：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;title&gt;IFE JavaScript Task 07&lt;/title&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">     *&#123;margin: 0px;padding: 0px;&#125;</div><div class="line">      </div><div class="line">      /*-- http://j4n.co/blog/Creating-your-own-css-grid-system  栅格化设计-- */ </div><div class="line"></div><div class="line">      /*-- The Container -- */ </div><div class="line">      .grid-container&#123;</div><div class="line">          width: 100%; </div><div class="line">          max-width: 1200px;   </div><div class="line">      &#125;</div><div class="line"></div><div class="line">      /*-- The Row -- */ </div><div class="line">      /*-- our cleafix hack -- */ </div><div class="line">      .row:before, </div><div class="line">      .row:after &#123;</div><div class="line">          content:&quot;&quot;;</div><div class="line">          display: table ;</div><div class="line">          clear:both;</div><div class="line">      &#125;</div><div class="line">       </div><div class="line">      /*-- The Column , Column Positioning , Column Widths , Column Gutters -- */ </div><div class="line">      .grid-container *&#123;</div><div class="line">          box-sizing: border-box;  /*-- setting border box on all elements inside the grid --*/</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      [class*=&apos;col-&apos;] &#123; /* a[src*=&quot;abc&quot;] 选择其 src 属性中包含 &quot;abc&quot; 子串的每个 &lt;a&gt; 元素。*/</div><div class="line">          float: left; </div><div class="line">          min-height: 1px; </div><div class="line">          width: 16.66%; </div><div class="line">          /*-- Column gutter -- */</div><div class="line">          padding: 12px; </div><div class="line">          background-color: #FFDCDC;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      .col-1&#123; width: 16.66%; &#125;</div><div class="line">      .col-2&#123; width: 33.33%; &#125;</div><div class="line">      .col-3&#123; width: 50%;    &#125;</div><div class="line">      .col-4&#123; width: 66.66%; &#125;</div><div class="line">      .col-5&#123; width: 83.33%; &#125;</div><div class="line">      .col-6&#123; width: 100%;   &#125;</div><div class="line"></div><div class="line">      .outline, .outline *&#123;</div><div class="line">          outline: 1px solid #F6A1A1; </div><div class="line">      &#125;</div><div class="line"></div><div class="line">      /*-- some extra column content styling --*/</div><div class="line">      [class*=&apos;col-&apos;] &gt; p &#123;</div><div class="line">       background-color: #FFC2C2; </div><div class="line">       padding: 0;</div><div class="line">       margin: 0;</div><div class="line">       text-align: center; </div><div class="line">       color: white; </div><div class="line">      &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div class=&quot;grid-container outline&quot;&gt;</div><div class="line">        &lt;div class=&quot;row&quot;&gt;</div><div class="line">            &lt;div class=&quot;col-1&quot;&gt;&lt;p&gt;col-1&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-1&quot;&gt;&lt;p&gt;col-1&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-1&quot;&gt;&lt;p&gt;col-1&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-1&quot;&gt;&lt;p&gt;col-1&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-1&quot;&gt;&lt;p&gt;col-1&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-1&quot;&gt;&lt;p&gt;col-1&lt;/p&gt;&lt;/div&gt; </div><div class="line">        &lt;/div&gt; </div><div class="line">        &lt;div class=&quot;row&quot;&gt;</div><div class="line">            &lt;div class=&quot;col-2&quot;&gt;&lt;p&gt;col-2&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-2&quot;&gt;&lt;p&gt;col-2&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-2&quot;&gt;&lt;p&gt;col-2&lt;/p&gt;&lt;/div&gt; </div><div class="line">        &lt;/div&gt; </div><div class="line">        &lt;div class=&quot;row&quot;&gt;</div><div class="line">            &lt;div class=&quot;col-3&quot;&gt;&lt;p&gt;col-3&lt;/p&gt;&lt;/div&gt; </div><div class="line">            &lt;div class=&quot;col-3&quot;&gt;&lt;p&gt;col-3&lt;/p&gt;&lt;/div&gt; </div><div class="line">        &lt;/div&gt; </div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>移动端响应式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*screens under 800px*/</div><div class="line">@media all and (max-width:800px)&#123;</div><div class="line">    .col-1&#123; width: 33.33%;    &#125;</div><div class="line">    .col-2&#123; width: 50%;        &#125;</div><div class="line">    .col-3&#123; width: 83.33%;    &#125;</div><div class="line">    .col-4&#123; width: 100%;    &#125;</div><div class="line">    .col-5&#123; width: 100%;    &#125;</div><div class="line">    .col-6&#123; width: 100%;      &#125;</div><div class="line"></div><div class="line">    .row .col-2:last-of-type&#123; /* p:last-of-type 选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。*/</div><div class="line">        width: 100%; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .row .col-5 ~ .col-1&#123;  /*p~ul 选择前面有 &lt;p&gt; 元素的每个 &lt;ul&gt; 元素。相同的父元素,但是 element2 不必直接紧随 element1*/</div><div class="line">        width: 100%; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/*screens under 650px*/</div><div class="line">@media all and (max-width:650px)&#123;</div><div class="line">    .col-1&#123; width: 50%;        &#125;</div><div class="line">    .col-2&#123; width: 100%;    &#125;</div><div class="line">    .col-3&#123; width: 100%;    &#125;</div><div class="line">    .col-4&#123; width: 100%;    &#125;</div><div class="line">    .col-5&#123; width: 100%;    &#125;</div><div class="line">    .col-6&#123; width: 100%;      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-响应式-12-栏网格布局"><a href="#3-响应式-12-栏网格布局" class="headerlink" title="3.响应式 12 栏网格布局"></a>3.响应式 12 栏网格布局</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@media all and (min-width:769px)&#123;</div><div class="line">	.col-md-1&#123; width: 8.33%; &#125;</div><div class="line">	.col-md-2&#123; width: 16.66%; &#125;</div><div class="line">	.col-md-3&#123; width: 25%;    &#125;</div><div class="line">	.col-md-4&#123; width: 33.33%; &#125;</div><div class="line">	.col-md-6&#123; width: 50%;   &#125;</div><div class="line">&#125;</div><div class="line">/*screens under 800px*/</div><div class="line">@media all and (max-width:768px)&#123;</div><div class="line">  .col-sm-2&#123; width: 16.66%;   &#125;</div><div class="line">  .col-sm-3&#123; width: 25%;      &#125;</div><div class="line">  .col-sm-6&#123; width: 50%;      &#125;</div><div class="line">  .col-sm-8&#123; width: 66.66%;   &#125;</div><div class="line">  .col-sm-12&#123; width: 100%;    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Task10-Flexbox-布局练习"><a href="#Task10-Flexbox-布局练习" class="headerlink" title="Task10:Flexbox 布局练习"></a>Task10:Flexbox 布局练习</h1><p><img src="http://7xrp04.com1.z0.glb.clouddn.com/task_1_10_1.png" alt="image"></p>
<h2 id="1-Flex布局是什么？"><a href="#1-Flex布局是什么？" class="headerlink" title="1.Flex布局是什么？"></a>1.Flex布局是什么？</h2><p>W3C针对布局设计的新标准，相对float和position会更加灵活处理父元素和子元素之间布局关系，让布局更加直观和灵活简单。有效的针对不同屏幕宽度大小的情况下，让元素自动有效合理处理布局结构</p>
<h2 id="2-Flexbox布局和网格布局的异同"><a href="#2-Flexbox布局和网格布局的异同" class="headerlink" title="2.Flexbox布局和网格布局的异同"></a>2.Flexbox布局和网格布局的异同</h2><p>弹性盒子布局主要适用于应用程序的组件及小规模的布局，而（新兴的）栅格布局则针对大规模的布局。</p>
<h2 id="3-Flex容器属性"><a href="#3-Flex容器属性" class="headerlink" title="3.Flex容器属性"></a>3.Flex容器属性</h2><ul>
<li>flex-direction: row | row-reverse | column column-reverse;主轴方向</li>
<li>flex-wrap: nowrap | wrap | wrap-reverse;是否可以换行</li>
<li>justify-content: flex-start | flex-end | center | space-between | space-around;主轴上的对齐方式</li>
<li>align-items: flex-start | flex-end | center | baseline | stretch;交叉轴的对齐方式</li>
<li>align-content: flex-start | flex-end | center | space-between | space-around | stretch;多行轴线的对齐方式<h2 id="4-Flex项目属性"><a href="#4-Flex项目属性" class="headerlink" title="4.Flex项目属性"></a>4.Flex项目属性</h2></li>
<li>order<br>根据order的值定义项目排列顺序。数值越小，排列越靠前，默认为0</li>
<li>align-self<br>定义单个项目在交叉轴的对齐方式，可覆盖align-items属性</li>
<li>flex-grow<br>定义项目放大比例，默认为0，当容器有剩余空间时不放大.<br>重点在于，每个方块的 flex-grow 和其他方块的是成<strong>比例</strong>的。</li>
<li>flex-shrink<br>定义项目缩小比例。默认为1，随着容器缩小而等比例缩小。<br>如果设置为0，项目将不缩小。</li>
<li>flex-basis<br>定义项目占据的主轴空间（main size）,默认是auto.</li>
<li>flex<br>flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<h2 id="5-屏幕宽度小于640px"><a href="#5-屏幕宽度小于640px" class="headerlink" title="5.屏幕宽度小于640px"></a>5.屏幕宽度小于640px</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@media all and (max-width:640px)&#123;</div><div class="line">   .container&#123;align-items: flex-start;&#125;</div><div class="line">   .box1,.box2,.box3&#123;order: 1;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-Flex属性设置"><a href="#6-Flex属性设置" class="headerlink" title="6.Flex属性设置"></a>6.Flex属性设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">display: flex;</div><div class="line">justify-content: space-between;</div><div class="line">align-items: center;</div><div class="line">flex-direction: row;</div><div class="line">flex-wrap: wrap;  /*是否可以换行（默认不换行）*/</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> baidu_ife_xiaowei </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[baidu_ife_小薇学院总结（三）]]></title>
      <url>https://barryleeweb.github.io/2017/07/12/baidu_ife_%E5%B0%8F%E8%96%87%E5%AD%A6%E9%99%A2%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Task5-零基础HTML及CSS编码（二）"><a href="#Task5-零基础HTML及CSS编码（二）" class="headerlink" title="Task5:零基础HTML及CSS编码（二）"></a>Task5:零基础HTML及CSS编码（二）</h1><h2 id="1-两栏布局（左边自适应，右边固定）"><a href="#1-两栏布局（左边自适应，右边固定）" class="headerlink" title="1.两栏布局（左边自适应，右边固定）"></a>1.两栏布局（左边自适应，右边固定）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#parent &#123;</div><div class="line">    position: relative;</div><div class="line">&#125;</div><div class="line">#left &#123;</div><div class="line">    margin-right:220px; </div><div class="line">&#125;</div><div class="line">#right &#123;</div><div class="line">    position: absolute; </div><div class="line">    right:0; </div><div class="line">    top:0;</div><div class="line">    width: 200px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-出现水平滚动条"><a href="#2-出现水平滚动条" class="headerlink" title="2.出现水平滚动条"></a>2.出现水平滚动条</h2><p>p标签是块状元素，默认是父容器宽度的100%，所以是定宽块状元素<br>右边固定盒子内部p元素，宽度为父元素宽度，右移40%后，在右边外面了。<br>解决：</p>
<ol>
<li>修改p标签</li>
<li>在p中添加margin-right: 40%;将宽度减小</li>
<li>在body添加overflow-x:hidden;</li>
</ol>
<h1 id="Task6-通过HTML及CSS模拟报纸排版"><a href="#Task6-通过HTML及CSS模拟报纸排版" class="headerlink" title="Task6:通过HTML及CSS模拟报纸排版"></a>Task6:通过HTML及CSS模拟报纸排版</h1><h2 id="1-行距、段落间距和首行缩进"><a href="#1-行距、段落间距和首行缩进" class="headerlink" title="1.行距、段落间距和首行缩进"></a>1.行距、段落间距和首行缩进</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">示例：&lt;p style=&quot;line-height:130%;margin:9px;text-indent:2em&quot;&gt;文字内容&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>说明：<br>line-height是行间距属性，margin是段落间距属性；<br>text-indent 的作用使得容器内首行缩进一定单位，上面的2em表示首行缩进2个汉字</p>
<h2 id="2-字体加粗，倾斜"><a href="#2-字体加粗，倾斜" class="headerlink" title="2.字体加粗，倾斜"></a>2.字体加粗，倾斜</h2><p>font-style: oblique;  /<em>倾斜字体</em>/<br>font-weight: bold; /<em>加粗</em>/<br>text-align：justify ; /<em>实现两端对齐文本效果</em>/<br>font-size:12px/24px 黑体;/<em>12px/24px指的是字体的宽度高度单位是像素</em>/<br>text-decoration: underline; /<em>下划线</em>/</p>
<h2 id="3-CSS实现三角形图标"><a href="#3-CSS实现三角形图标" class="headerlink" title="3.CSS实现三角形图标"></a>3.CSS实现三角形图标</h2><p>如果我们要做倒立三角形、向右的、或者向左的三角形，只需要为三角形底部设置边框，两腰边框透明即可。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">width: 0;</div><div class="line">height: 0;</div><div class="line">border-top: 40px solid transparent;</div><div class="line">border-left: 40px solid #ff0000;</div><div class="line">border-bottom: 40px solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> baidu_ife_xiaowei </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[baidu_ife_小薇学院总结（二）]]></title>
      <url>https://barryleeweb.github.io/2017/07/11/baidu_ife_%E5%B0%8F%E8%96%87%E5%AD%A6%E9%99%A2%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Task3-三栏式布局"><a href="#Task3-三栏式布局" class="headerlink" title="Task3:三栏式布局"></a>Task3:三栏式布局</h1><h2 id="1-三栏式布局方法"><a href="#1-三栏式布局方法" class="headerlink" title="1.三栏式布局方法"></a>1.三栏式布局方法</h2><p>方法一：inline-block方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">left,center,right&#123; display：inline-block&#125; /* 包裹作用，不会塌陷 */ </div><div class="line">left&#123;width:200px&#125;</div><div class="line">right&#123;width:120px&#125;</div><div class="line">center&#123;width:calc(100%-200px-120px-40px)&#125; /* 动态计算中间盒子的宽度 */</div></pre></td></tr></table></figure></p>
<p>方法二：float布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;left&quot;&gt;</div><div class="line">&lt;div class=&quot;right&quot;&gt;  /* 这里将right提到center前面 */</div><div class="line">&lt;div class=&quot;center&quot;&gt;</div><div class="line"></div><div class="line">.left&#123;float:left&#125;</div><div class="line">.center&#123; margin-left: 220px; margin-right: 140px; &#125;</div><div class="line">.right&#123;float: right;&#125;</div></pre></td></tr></table></figure></p>
<p>方法三：Flex布局（新）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.middle&#123;display: flex;&#125;</div><div class="line">.left,.right&#123;width: 100px;&#125;</div><div class="line">.right&#123;order: 2;&#125;</div><div class="line">.main&#123;</div><div class="line">    order: 1;</div><div class="line">    flex: 1; /*让所有弹性盒模型对象的子元素都有相同的长度，忽略它们内部的内容*/ </div><div class="line">    margin: 0 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>方法四：圣杯和双飞翼布局（旧）<br>基本思路及区别：<br>1.两种布局的基本构思为：首先让中间层100%宽度占满同一高度的空间，在左右两层被挤出中间层所在区域时， 使用margin-left的负值将左右两个层拉回与中间层同一高度的空间，接下来调整左右两层到指定位置， 最后使用中间层的margin或padding属性使中间层的内容躲出左右两层占住的显示区。</p>
<p>2.两种布局的主要区别在于：圣杯布局采用一个父层包含中间、左右三个子层，设置父层的padding值腾出左右两层的显示区， 并对左右两层使用relative和left、right值调整位置；双飞翼采用中间、左右三层并列，再在中间层里设置一个子层， 设置中间层子层的margin值腾出左右两层的显示区，对左右两层使用margin值即可调整位置；</p>
<p>圣杯html结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;container&quot;&gt;</div><div class="line">    &lt;div id=&quot;main&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;div id=&quot;right&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>圣杯css基本代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#container&#123;</div><div class="line">    padding: 0px 120px 0 140px;/*腾出宽度*/</div><div class="line">    &#125;</div><div class="line">#main&#123;</div><div class="line">    width: 100%;</div><div class="line">    position: relative;</div><div class="line">    &#125;</div><div class="line">#left&#123;</div><div class="line">    width: 140px;</div><div class="line">    margin-left: -100%;/*将left层拉回main层所在高度区域*/</div><div class="line">    left: -140px;/*调整位置*/</div><div class="line">    position: relative;</div><div class="line">    &#125;</div><div class="line">#right&#123;</div><div class="line">    width: 120px;</div><div class="line">    margin-left: -120px;/*将right层拉回main层所在高度区域*/</div><div class="line">    right: -120px;/*调整位置*/</div><div class="line">    position: relative;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>双飞翼html结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;main&quot;&gt;</div><div class="line">    &lt;div id=&quot;main-inner&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;right&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>双飞翼css基本代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#main&#123;</div><div class="line">    width: 100%;</div><div class="line">    position: relative;</div><div class="line">    &#125;</div><div class="line">#main-inner&#123;</div><div class="line">    margin：0 120px 0 140px；</div><div class="line">    ｝</div><div class="line">#left&#123;</div><div class="line">    width: 140px;</div><div class="line">    margin-left: -100%;/*将left层拉回main层所在高度区域*/</div><div class="line">    &#125;</div><div class="line">#right&#123;</div><div class="line">    width: 120px;</div><div class="line">    margin-left: -120px;/*将right层拉回main层所在高度区域*/</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-box-sizing-属性"><a href="#2-box-sizing-属性" class="headerlink" title="2.box-sizing 属性"></a>2.box-sizing 属性</h2><p>取值说明</p>
<ol>
<li><p>content-box:此值为其默认值，其让元素维持W3C的标准Box Model，也就是说元素的宽度/高度（width/height）等于元素边框宽度（border）加上元素内边距（padding）加上元素内容宽度/高度（content width/height）即：Element Width/Height = border+padding+content width/height。</p>
</li>
<li><p>border-box:此值让元素维持IE传统的Box Model（IE6以下版本），也就是说元素的宽度/高度等于元素内容的宽度/高度。（从上面Box Model介绍可知，我们这里的content width/height包含了元素的border,padding,内容的width/height【此处的内容宽度/高度=width/height-border-padding】）。</p>
</li>
</ol>
<h2 id="3-inline-block之间间距"><a href="#3-inline-block之间间距" class="headerlink" title="3.inline-block之间间距"></a>3.inline-block之间间距</h2><p>元素间留白间距出现的原因就是标签段之间的空格，因此，去掉HTML中的空格，自然间距就木有了。考虑到代码可读性，显然连成一行的写法是不可取的，我们可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;space&quot;&gt;</div><div class="line">    &lt;a href=&quot;##&quot;&gt;</div><div class="line">    惆怅&lt;/a&gt;&lt;a href=&quot;##&quot;&gt;</div><div class="line">    淡定&lt;/a&gt;&lt;a href=&quot;##&quot;&gt;</div><div class="line">    热血&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">或者是：</div><div class="line"></div><div class="line">&lt;div class=&quot;space&quot;&gt;</div><div class="line">    &lt;a href=&quot;##&quot;&gt;惆怅&lt;/a</div><div class="line">    &gt;&lt;a href=&quot;##&quot;&gt;淡定&lt;/a</div><div class="line">    &gt;&lt;a href=&quot;##&quot;&gt;热血&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">或者是借助HTML注释：</div><div class="line"></div><div class="line">&lt;div class=&quot;space&quot;&gt;</div><div class="line">    &lt;a href=&quot;##&quot;&gt;惆怅&lt;/a&gt;&lt;!--</div><div class="line">    --&gt;&lt;a href=&quot;##&quot;&gt;淡定&lt;/a&gt;&lt;!--</div><div class="line">    --&gt;&lt;a href=&quot;##&quot;&gt;热血&lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h1 id="Task4-定位和居中问题"><a href="#Task4-定位和居中问题" class="headerlink" title="Task4:定位和居中问题"></a>Task4:定位和居中问题</h1><h2 id="1-水平及上下居中"><a href="#1-水平及上下居中" class="headerlink" title="1.水平及上下居中"></a>1.水平及上下居中</h2><p>方法一：绝对定位的居中实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">transform: translate(-50%,-50%); /*x轴y轴各位移div盒子的一半*/</div></pre></td></tr></table></figure></p>
<p>方法二：margin:auto实现绝对定位元素的居中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  position: absolute; left: 0; top: 0; right: 0; bottom: 0; </div><div class="line">  margin: auto; /* 有了这个就自动居中了 */</div><div class="line">```   	</div><div class="line">方法三：Flex布局方法：</div></pre></td></tr></table></figure></p>
<p>  width:100%;<br>  height:100%;<br>  display: -webkit-flex;<br>  display: flex;<br>  justify-content:center;<br>  align-items:center;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">## 2.清除浮动</div><div class="line">方法一：overflow:hidden;（或者auto，hidden更好）</div><div class="line"></div><div class="line">方法二：清除浮动更好的方法是clearfix技巧</div><div class="line">“clearfix”技巧是基于在父元素上使用“:before”和“:after”两个伪类。使用这些伪类，我们可以在浮动元素的父容器前面和后面创建隐藏元素。“:before”伪类是用来防止子元素顶部的外边距塌陷，使用“display: table”创建一个匿名的“table-cell”元素。这也确保在IE6和IE7下具有一致性。“:after”伪类是用来防止子元素的底部的外边距塌陷，以及用来清除元素的浮动。</div><div class="line"></div><div class="line">一个常见的方法是将定义一个类名，把这个类名加到需要清除浮动的容器上。例如使用“clearfix”清除浮动，Dan Cederholm为容器设置了一个类名“group”。在需要清除浮动的容器上添加这个类名“group”。</div></pre></td></tr></table></figure></p>
<p>.group:before,<br>.group:after {<br>  content: “”;<br>  display: table;<br>}<br>.group:after {<br>  clear: both;<br>}<br>.group {<br>  *zoom: 1;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">## 3.absolute定位初始位置</div><div class="line">在文档流中，定义为position:absolute的元素已经被删除了。</div><div class="line">那它的定位到底是相对于body，还是父级元素呢？</div><div class="line"></div><div class="line">结论如下：</div><div class="line">position:absolute是相对于他的包含块中第一个有position:absolute或relative及 fixed属性的父级元素，如果都没有，就是相对于body。</div><div class="line"></div><div class="line">## 4.border-radius属性</div><div class="line">border-radius属性其实可以分为四个其他的属性：</div><div class="line">border-radius-top-left         /*左上角*/</div><div class="line">border-radius-top-right       /*右上角*/</div><div class="line">border-radius-bottom-right /*右下角*/</div><div class="line">border-radius-bottom-left   /*左下角*/</div><div class="line">//提示：按顺时针方式</div><div class="line"></div><div class="line">制作半圆：</div></pre></td></tr></table></figure></p>
<p>width:100px;<br>    height:50px;//高度是宽度的一半<br>    background-color:#000;<br>border-radius:50px 50px 0 0;//左上和右上至少为height值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">画实心圆</div></pre></td></tr></table></figure></p>
<p>width:100px;<br>      height:100px;<br>    background-color:#cb18f8;<br>      border-radius:50px;<br>   （或者border-radius:50%）<br>```</p>
]]></content>
      
        <categories>
            
            <category> baidu_ife_xiaowei </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[baidu_ife_小薇学院总结（一）]]></title>
      <url>https://barryleeweb.github.io/2017/07/11/baidu_ife_%E5%B0%8F%E8%96%87%E5%AD%A6%E9%99%A2%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Task1-零基础HTML编码"><a href="#Task1-零基础HTML编码" class="headerlink" title="Task1:零基础HTML编码"></a>Task1:零基础HTML编码</h1><h2 id="1-新标签"><a href="#1-新标签" class="headerlink" title="1.新标签"></a>1.新标签</h2><p>&emsp;&emsp;在学习html5的过程中，知道了一些新的标签，能够更清晰的表达文档的结构（原来都是用div，可能加上id或者class来划分）。</p>
<ul>
<li>header 页面头部／标题／logo／搜索表单 等等</li>
<li>nav 任何有导航性质的标签都可以用到，比如页面中的导航，可以有多个</li>
<li>aside 和主要内容不相关的内容，工具内容／广告什么的</li>
<li>article 表示独立的可重复的结构：论坛的帖子／博客的评论</li>
<li>section 表示文档中的一个区域：一般会带一个标题　相临的section之间是有相关性的，article则不相关，是独立的</li>
<li>footer 章节的尾部：版权信息／相关文档／一些独立内容的尾部也可以用到</li>
</ul>
<a id="more"></a>
<h2 id="2-打开新窗口："><a href="#2-打开新窗口：" class="headerlink" title="2.打开新窗口："></a>2.打开新窗口：</h2><p><code>&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_Blank&quot;&gt;百度&lt;/a&gt;</code><br>_Blank是新窗口<br>_Self是自身<br>_Parent是父窗口<br>_Top是顶层窗口</p>
<p>.空格：在html中输入空格是没有作用的，需要输入&amp;nbsp这个代码</p>
<h2 id="3-表格："><a href="#3-表格：" class="headerlink" title="3.表格："></a>3.表格：</h2><p>加边框<code>&lt;table border=&quot;1&quot;&gt; &lt;/table&gt;</code><br>表格的跨行和跨列：colspan  rowspan<br>colspan 属性规定单元格可横跨的列数。</p>
<h2 id="4-表单"><a href="#4-表单" class="headerlink" title="4.表单"></a>4.表单</h2><p>&emsp;&emsp;label标签，为input元素定义标注，改进了表单控件的可用性，当你点击到label标签时，会自动聚焦到对应控件上。<br><code>&lt;label&gt;请输入用户名&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;&lt;/label&gt;</code></p>
<h2 id="5-Ife-baidu-com页面HTML结构："><a href="#5-Ife-baidu-com页面HTML结构：" class="headerlink" title="5.Ife.baidu.com页面HTML结构："></a>5.Ife.baidu.com页面HTML结构：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  …</div><div class="line">  &lt;meta name=”viewport” content=””&gt;</div><div class="line">&lt;meta name=”keywords” content=””&gt;</div><div class="line">&lt;meta name=”description” content=””&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">&lt;header&gt;&lt;nav&gt;&lt;/nav&gt;&lt;/header&gt;</div><div class="line">&lt;main&gt;&lt;div&gt;&lt;/div&gt;&lt;/main&gt;</div><div class="line">&lt;footer&gt;&lt;/footer&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="Task2-零基础HTML编码及CSS编码（一）"><a href="#Task2-零基础HTML编码及CSS编码（一）" class="headerlink" title="Task2:零基础HTML编码及CSS编码（一）"></a>Task2:零基础HTML编码及CSS编码（一）</h1><h2 id="1-关于外边距的合并的问题"><a href="#1-关于外边距的合并的问题" class="headerlink" title="1.关于外边距的合并的问题"></a>1.关于外边距的合并的问题</h2><p>&emsp;&emsp;外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。<br>解决办法：</p>
<ol>
<li>都用float来定位（有条件要求，适用范围较广）</li>
<li>为父元素添加overflow不为visiable 的属性 （适用范围极广，推荐使用）</li>
<li>为元素添加border（一般不用）</li>
<li>使用绝对定位（适用范围较窄）</li>
<li>父元素增加padding-top属性（改变尺寸，不建议使用）</li>
</ol>
<h2 id="2-对于便签选择器的灵活运用"><a href="#2-对于便签选择器的灵活运用" class="headerlink" title="2.对于便签选择器的灵活运用"></a>2.对于便签选择器的灵活运用</h2><p>.SideBar&gt;h1;子选择器<br>.Gallery img包含选择器<br>.pic01,.pic02,.pic03分组选择器</p>
<p>：&gt;作用于元素的第一代后代，空格作用于元素的所有后代。</p>
<p>注意：后代选择器，后面不能跟分组选择器，只会作用第一个。</p>
<p>:nth-child(n) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。<br>&emsp;&emsp;Odd 和 even 是可用于匹配下标是奇数或偶数的子元素的关键词（第一个子元素的下标是 1）<br>&emsp;&emsp;使用公式 (an + b)。描述：表示周期的长度，n 是计数器（从 0 开始），b 是偏移值。<br>:last-child 选择器匹配属于其父元素的最后一个子元素的每个元素。</p>
<h2 id="3-使用超链接a标签的伪类"><a href="#3-使用超链接a标签的伪类" class="headerlink" title="3.使用超链接a标签的伪类"></a>3.使用超链接a标签的伪类</h2><p>a:link {color: #FF0000}        /<em> 未访问的链接 </em>/<br>a:visited {color: #00FF00}    /<em> 已访问的链接 </em>/<br>a:hover {color: #FF00FF}    /<em> 鼠标移动到链接上 </em>/<br>a:active {color: #0000FF}    /<em> 选定的链接 </em>/</p>
<h2 id="4-CSS3-box-shadow"><a href="#4-CSS3-box-shadow" class="headerlink" title="4.CSS3 box-shadow"></a>4.CSS3 box-shadow</h2><p>box-shadow: h-shadow v-shadow blur spread color inset;</p>
<p>h-shadow    必需的。水平阴影的位置。允许负值<br>v-shadow    必需的。垂直阴影的位置。允许负值<br>blur    可选。模糊距离<br>spread    可选。阴影的大小<br>color    可选。阴影的颜色。在CSS颜色值寻找颜色值的完整列表<br>inset    可选。从外层的阴影（开始时）改变阴影内侧阴影</p>
<h2 id="5-首行文本的缩进"><a href="#5-首行文本的缩进" class="headerlink" title="5.首行文本的缩进"></a>5.首行文本的缩进</h2><p>text-indent: 2em;  首行空2个字<br>text-indent 属性规定文本块中首行文本的缩进。</p>
<h2 id="6-Table"><a href="#6-Table" class="headerlink" title="6.Table"></a>6.Table</h2><p>border-collapse 属性设置表格的边框是否被合并为一个单一的边框<br>separate    默认值。边框会被分开。<br>collapse    如果可能，边框会合并为一个单一的边框</p>
<h2 id="7-表单的布局"><a href="#7-表单的布局" class="headerlink" title="7.表单的布局"></a>7.表单的布局</h2><p>左侧对齐：<br>左侧文字用<span>,定位absolute，left：40%<br>右侧对齐；<br>右侧input用<label>包裹，定位relative，left：40%</label></span></p>
]]></content>
      
        <categories>
            
            <category> baidu_ife_xiaowei </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML&amp;CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MarkdownPad如何写博客]]></title>
      <url>https://barryleeweb.github.io/2017/07/04/MarkdownPad%E5%A6%82%E4%BD%95%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>&emsp;&emsp;标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div></pre></td></tr></table></figure></p>
<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。<br><a id="more"></a></p>
<h2 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h2><p>在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>1 </li>
<li>2 </li>
<li>3</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>1</li>
<li>2</li>
<li>3</li>
</ol>
<h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><p>在文本前加入 &gt; 这种尖括号（大于号）为引用的格式</p>
<blockquote>
<p>这里是引用</p>
</blockquote>
<h2 id="4-图片和链接"><a href="#4-图片和链接" class="headerlink" title="4.图片和链接"></a>4.图片和链接</h2><p>插入链接与插入图片的语法很像，区别在一个 !号</p>
<p>图片为：<code>![](){ImgCap}{/ImgCap}</code><br><img src="http://mouapp.com/Mou_128.png" alt="Mou icon"></p>
<p>链接为：<code>[]()</code><br><a href="http：//www.baidu.com">baidu</a></p>
<h2 id="5-粗体和斜体"><a href="#5-粗体和斜体" class="headerlink" title="5.粗体和斜体"></a>5.粗体和斜体</h2><p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。<br><em>斜体</em><br><strong>粗体</strong> </p>
<h2 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h2><p>每一行的元素由<code>|</code>隔开</p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h2 id="7-代码框"><a href="#7-代码框" class="headerlink" title="7.代码框"></a>7.代码框</h2><p>在文章里优雅的引用代码框，只需要用两个 ` 把中间的代码包裹起来<br>代码块用三个`表示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h2><p>分割线的语法只需要三个 * 号</p>
<hr>
<h2 id="9-转义字符"><a href="#9-转义字符" class="headerlink" title="9.转义字符"></a>9.转义字符</h2><p>\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p>
<h2 id="10-快捷键"><a href="#10-快捷键" class="headerlink" title="10.快捷键"></a>10.快捷键</h2><ol>
<li>ctrl+1 一级标题 </li>
<li>ctrl+2 二级标题 </li>
<li>ctrl+shift+o 有序列表</li>
<li>ctrl+u 无序列表</li>
<li>ctrl+g 插入图片</li>
<li>ctrl+l 插入超链接</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://barryleeweb.github.io/2017/03/07/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
